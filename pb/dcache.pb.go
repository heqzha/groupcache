// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcache.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	dcache.proto

It has these top-level messages:
	Stat
	GetReq
	GetRes
	SetReq
	SetRes
	DelReq
	DelRes
	RegisterReq
	RegisterRes
	UnregisterReq
	UnregisterRes
	SyncSrvGroupsReq
	SyncSrvGroupsRes
	PingReq
	PingRes
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Statistics Data of key
type Stat struct {
	Rps float64 `protobuf:"fixed64,1,opt,name=rps" json:"rps,omitempty"`
}

func (m *Stat) Reset()                    { *m = Stat{} }
func (m *Stat) String() string            { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()               {}
func (*Stat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Stat) GetRps() float64 {
	if m != nil {
		return m.Rps
	}
	return 0
}

type GetReq struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *GetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetRes struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Stat   *Stat  `protobuf:"bytes,3,opt,name=stat" json:"stat,omitempty"`
}

func (m *GetRes) Reset()                    { *m = GetRes{} }
func (m *GetRes) String() string            { return proto.CompactTextString(m) }
func (*GetRes) ProtoMessage()               {}
func (*GetRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *GetRes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GetRes) GetStat() *Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type SetReq struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetReq) Reset()                    { *m = SetReq{} }
func (m *SetReq) String() string            { return proto.CompactTextString(m) }
func (*SetReq) ProtoMessage()               {}
func (*SetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *SetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetRes struct {
	Status bool  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Stat   *Stat `protobuf:"bytes,2,opt,name=stat" json:"stat,omitempty"`
}

func (m *SetRes) Reset()                    { *m = SetRes{} }
func (m *SetRes) String() string            { return proto.CompactTextString(m) }
func (*SetRes) ProtoMessage()               {}
func (*SetRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *SetRes) GetStat() *Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type DelReq struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *DelReq) Reset()                    { *m = DelReq{} }
func (m *DelReq) String() string            { return proto.CompactTextString(m) }
func (*DelReq) ProtoMessage()               {}
func (*DelReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DelReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *DelReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DelRes struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Stat   *Stat  `protobuf:"bytes,3,opt,name=stat" json:"stat,omitempty"`
}

func (m *DelRes) Reset()                    { *m = DelRes{} }
func (m *DelRes) String() string            { return proto.CompactTextString(m) }
func (*DelRes) ProtoMessage()               {}
func (*DelRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DelRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *DelRes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DelRes) GetStat() *Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type RegisterReq struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RegisterReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *RegisterReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type RegisterRes struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *RegisterRes) Reset()                    { *m = RegisterRes{} }
func (m *RegisterRes) String() string            { return proto.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()               {}
func (*RegisterRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RegisterRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type UnregisterReq struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *UnregisterReq) Reset()                    { *m = UnregisterReq{} }
func (m *UnregisterReq) String() string            { return proto.CompactTextString(m) }
func (*UnregisterReq) ProtoMessage()               {}
func (*UnregisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UnregisterReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UnregisterReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type UnregisterRes struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *UnregisterRes) Reset()                    { *m = UnregisterRes{} }
func (m *UnregisterRes) String() string            { return proto.CompactTextString(m) }
func (*UnregisterRes) ProtoMessage()               {}
func (*UnregisterRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UnregisterRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type SyncSrvGroupsReq struct {
	SrvGroups []byte `protobuf:"bytes,1,opt,name=srv_groups,json=srvGroups,proto3" json:"srv_groups,omitempty"`
}

func (m *SyncSrvGroupsReq) Reset()                    { *m = SyncSrvGroupsReq{} }
func (m *SyncSrvGroupsReq) String() string            { return proto.CompactTextString(m) }
func (*SyncSrvGroupsReq) ProtoMessage()               {}
func (*SyncSrvGroupsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SyncSrvGroupsReq) GetSrvGroups() []byte {
	if m != nil {
		return m.SrvGroups
	}
	return nil
}

type SyncSrvGroupsRes struct {
	Status    bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Condition int32  `protobuf:"varint,2,opt,name=condition" json:"condition,omitempty"`
	SrvGroups []byte `protobuf:"bytes,3,opt,name=srv_groups,json=srvGroups,proto3" json:"srv_groups,omitempty"`
}

func (m *SyncSrvGroupsRes) Reset()                    { *m = SyncSrvGroupsRes{} }
func (m *SyncSrvGroupsRes) String() string            { return proto.CompactTextString(m) }
func (*SyncSrvGroupsRes) ProtoMessage()               {}
func (*SyncSrvGroupsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SyncSrvGroupsRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *SyncSrvGroupsRes) GetCondition() int32 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *SyncSrvGroupsRes) GetSrvGroups() []byte {
	if m != nil {
		return m.SrvGroups
	}
	return nil
}

type PingReq struct {
	Group string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PingReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PingReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type PingRes struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *PingRes) Reset()                    { *m = PingRes{} }
func (m *PingRes) String() string            { return proto.CompactTextString(m) }
func (*PingRes) ProtoMessage()               {}
func (*PingRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PingRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*Stat)(nil), "pb.Stat")
	proto.RegisterType((*GetReq)(nil), "pb.GetReq")
	proto.RegisterType((*GetRes)(nil), "pb.GetRes")
	proto.RegisterType((*SetReq)(nil), "pb.SetReq")
	proto.RegisterType((*SetRes)(nil), "pb.SetRes")
	proto.RegisterType((*DelReq)(nil), "pb.DelReq")
	proto.RegisterType((*DelRes)(nil), "pb.DelRes")
	proto.RegisterType((*RegisterReq)(nil), "pb.RegisterReq")
	proto.RegisterType((*RegisterRes)(nil), "pb.RegisterRes")
	proto.RegisterType((*UnregisterReq)(nil), "pb.UnregisterReq")
	proto.RegisterType((*UnregisterRes)(nil), "pb.UnregisterRes")
	proto.RegisterType((*SyncSrvGroupsReq)(nil), "pb.SyncSrvGroupsReq")
	proto.RegisterType((*SyncSrvGroupsRes)(nil), "pb.SyncSrvGroupsRes")
	proto.RegisterType((*PingReq)(nil), "pb.PingReq")
	proto.RegisterType((*PingRes)(nil), "pb.PingRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CacheServ service

type CacheServClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRes, error)
	Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelRes, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	Unregister(ctx context.Context, in *UnregisterReq, opts ...grpc.CallOption) (*UnregisterRes, error)
	SyncSrvGroups(ctx context.Context, in *SyncSrvGroupsReq, opts ...grpc.CallOption) (*SyncSrvGroupsRes, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error)
}

type cacheServClient struct {
	cc *grpc.ClientConn
}

func NewCacheServClient(cc *grpc.ClientConn) CacheServClient {
	return &cacheServClient{cc}
}

func (c *cacheServClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := grpc.Invoke(ctx, "/pb.CacheServ/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRes, error) {
	out := new(SetRes)
	err := grpc.Invoke(ctx, "/pb.CacheServ/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServClient) Del(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*DelRes, error) {
	out := new(DelRes)
	err := grpc.Invoke(ctx, "/pb.CacheServ/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := grpc.Invoke(ctx, "/pb.CacheServ/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServClient) Unregister(ctx context.Context, in *UnregisterReq, opts ...grpc.CallOption) (*UnregisterRes, error) {
	out := new(UnregisterRes)
	err := grpc.Invoke(ctx, "/pb.CacheServ/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServClient) SyncSrvGroups(ctx context.Context, in *SyncSrvGroupsReq, opts ...grpc.CallOption) (*SyncSrvGroupsRes, error) {
	out := new(SyncSrvGroupsRes)
	err := grpc.Invoke(ctx, "/pb.CacheServ/SyncSrvGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error) {
	out := new(PingRes)
	err := grpc.Invoke(ctx, "/pb.CacheServ/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CacheServ service

type CacheServServer interface {
	Get(context.Context, *GetReq) (*GetRes, error)
	Set(context.Context, *SetReq) (*SetRes, error)
	Del(context.Context, *DelReq) (*DelRes, error)
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
	Unregister(context.Context, *UnregisterReq) (*UnregisterRes, error)
	SyncSrvGroups(context.Context, *SyncSrvGroupsReq) (*SyncSrvGroupsRes, error)
	Ping(context.Context, *PingReq) (*PingRes, error)
}

func RegisterCacheServServer(s *grpc.Server, srv CacheServServer) {
	s.RegisterService(&_CacheServ_serviceDesc, srv)
}

func _CacheServ_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CacheServ/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheServ_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CacheServ/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheServ_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CacheServ/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServServer).Del(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheServ_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CacheServ/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheServ_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CacheServ/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServServer).Unregister(ctx, req.(*UnregisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheServ_SyncSrvGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSrvGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServServer).SyncSrvGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CacheServ/SyncSrvGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServServer).SyncSrvGroups(ctx, req.(*SyncSrvGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheServ_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CacheServ/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CacheServ",
	HandlerType: (*CacheServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CacheServ_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _CacheServ_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _CacheServ_Del_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _CacheServ_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _CacheServ_Unregister_Handler,
		},
		{
			MethodName: "SyncSrvGroups",
			Handler:    _CacheServ_SyncSrvGroups_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CacheServ_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dcache.proto",
}

func init() { proto.RegisterFile("dcache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xdd, 0x7c, 0x6c, 0x6c, 0x6e, 0xbb, 0xb8, 0x0e, 0x8b, 0x84, 0xa0, 0xb8, 0x0e, 0x88, 0xfb,
	0x14, 0xd6, 0xad, 0x20, 0x3e, 0xe8, 0x8b, 0xc5, 0xbe, 0xca, 0x8c, 0x3e, 0x4b, 0x9a, 0x0c, 0x31,
	0x58, 0x92, 0x38, 0x33, 0x0d, 0xf4, 0x97, 0xf9, 0xf7, 0xe4, 0x4e, 0x12, 0x92, 0xa6, 0x8d, 0x50,
	0xf1, 0xed, 0x7e, 0x9c, 0x73, 0xcf, 0xe9, 0xbd, 0x93, 0xc2, 0x22, 0x4d, 0xe2, 0xe4, 0x87, 0x88,
	0x2a, 0x59, 0xea, 0x92, 0xd8, 0xd5, 0x86, 0x06, 0xe0, 0x72, 0x1d, 0x6b, 0x72, 0x0d, 0x8e, 0xac,
	0x54, 0x60, 0xdd, 0x5a, 0x77, 0x16, 0xc3, 0x90, 0xde, 0x83, 0xb7, 0x16, 0x9a, 0x89, 0x5f, 0xe4,
	0x06, 0x2e, 0x33, 0x59, 0xee, 0x2a, 0xd3, 0xf5, 0x59, 0x93, 0x20, 0xe3, 0xa7, 0xd8, 0x07, 0xb6,
	0xa9, 0x61, 0x48, 0xbf, 0xb6, 0x0c, 0x45, 0x9e, 0x82, 0xa7, 0x74, 0xac, 0x77, 0xcd, 0xc0, 0x19,
	0x6b, 0x33, 0x9c, 0x54, 0xc7, 0xdb, 0x9d, 0x30, 0xac, 0x05, 0x6b, 0x12, 0xf2, 0x0c, 0x5c, 0xec,
	0x07, 0xce, 0xad, 0x75, 0x37, 0x7f, 0x98, 0x45, 0xd5, 0x26, 0x42, 0x4f, 0xcc, 0x54, 0xe9, 0x67,
	0xf0, 0xf8, 0x59, 0x3e, 0x7a, 0x15, 0x67, 0xa0, 0x42, 0x3f, 0xb6, 0x73, 0xa6, 0xdd, 0x75, 0x3e,
	0xec, 0x93, 0x3e, 0xee, 0xc1, 0x5b, 0x89, 0xed, 0x99, 0xfb, 0x30, 0x8c, 0xff, 0xbb, 0x8f, 0x77,
	0x30, 0x67, 0x22, 0xcb, 0x95, 0x16, 0x72, 0xda, 0x0c, 0x01, 0x37, 0x4e, 0x53, 0xd9, 0xba, 0x31,
	0x31, 0x7d, 0x35, 0x24, 0x4e, 0x7a, 0xa2, 0xef, 0xe1, 0xea, 0x5b, 0x21, 0xff, 0x49, 0xe1, 0xf5,
	0x21, 0x75, 0x5a, 0xe3, 0x0d, 0x5c, 0xf3, 0x7d, 0x91, 0x70, 0x59, 0xaf, 0x71, 0x98, 0x42, 0x99,
	0xe7, 0x00, 0x4a, 0xd6, 0xdf, 0xcd, 0xf4, 0x06, 0xbf, 0x60, 0xbe, 0xea, 0x10, 0x34, 0x3b, 0xa2,
	0xfc, 0xed, 0x90, 0x7e, 0x52, 0x16, 0x69, 0xae, 0xf3, 0xb2, 0x30, 0x06, 0x2f, 0x59, 0x5f, 0x18,
	0x09, 0x39, 0x63, 0xa1, 0x25, 0x3c, 0xfa, 0x92, 0x17, 0xd9, 0x79, 0xbf, 0xfc, 0x65, 0x47, 0x9a,
	0x34, 0xf5, 0xf0, 0xdb, 0x06, 0xff, 0x13, 0x7e, 0x7d, 0x5c, 0xc8, 0x9a, 0xbc, 0x00, 0x67, 0x2d,
	0x34, 0x01, 0x3c, 0x6e, 0xf3, 0x99, 0x85, 0x7d, 0xac, 0xe8, 0x05, 0x02, 0x78, 0x07, 0xe0, 0x03,
	0x00, 0x1f, 0x00, 0x56, 0x62, 0xdb, 0x00, 0x9a, 0x87, 0x19, 0xf6, 0x31, 0x02, 0x22, 0x98, 0x75,
	0xf7, 0x26, 0x8f, 0xb1, 0x33, 0x78, 0x36, 0xe1, 0xa8, 0x80, 0xf8, 0xb7, 0x00, 0xfd, 0xf5, 0xc8,
	0x13, 0x04, 0x1c, 0x3c, 0x84, 0xf0, 0xa8, 0x84, 0xac, 0x0f, 0x70, 0x75, 0x70, 0x17, 0x72, 0x63,
	0x5c, 0x8e, 0xae, 0x1b, 0x9e, 0xaa, 0x22, 0x9d, 0x82, 0x8b, 0x8b, 0x23, 0x73, 0xec, 0xb7, 0x7b,
	0x0f, 0x07, 0x89, 0xa2, 0x17, 0x1b, 0xcf, 0xfc, 0x5d, 0x2d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x09, 0xca, 0x77, 0xe2, 0xbe, 0x04, 0x00, 0x00,
}
